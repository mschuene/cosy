#+TITLE:Cognitive Systems Excercise 3 
#+AUTHOR: Maik Sch√ºnemann
#+email: maikschuenemann@gmail.com
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  de
#+OPTIONS:   H:3 num:t toc:t :nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME:
#+TAGS:  BlowerDoor(b) Suub(s) Uni(u) Home(h) Task(t) Note(n) Info(i)
#+TAGS: Changed(c) Project(p) Reading(r) Hobby(f) OpenSource(o) Meta(m)
#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) | DONE(d) CANCELLED(c) DEFERRED(f) NEXT(n)
#+STARTUP:showall
#+LaTeX_CLASS:try
-----
* Excercise 1

** Concept of the extension
*** Additional Components
    We added group recognizer components to our cognitive
    architecture, one for each group of proximity.
    They extend the counting/recognizing visual routines - 
    functionality of excercise 2. 
*** Interplay between the components
    To model human behaviour, we only concentrate on the filled
    regions of the visual stimulus. We extended the peripheral view
    component to quickly scan the picture to find the regions of 
    the stimuli that are filled. 
    On this regions we invoke the actual algorithm to count the 
    groups (implemented in the components above).
    If we have found a non-empty cell our system looks at all adjacent
    cells if they also belong to the group. It does this until it has
    found the whole group the cell belongs to.
    It then continues looking for other groups but knows what cells it
    has looked at before and doesn't revisit them.
    The components for recognizing groups of proximity, color, shape 
    only behave differently when they decide whether the adjacent cell
    belongs to the same group or not

*** Examples: \\
    
    \begin{figure}[hbtp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{grouping_example}
	\caption{Recognizing 4 groups of proximity}
	\label{fig:aufbau}
    \end{figure}

    \begin{figure}[hbtp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{color_groups_example}
	\caption{Recognizing the groups of color}
	\label{fig:aufbau}
    \end{figure}

    \begin{figure}[hbtp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{count_obscured}
	\caption{Recognizing one line-like object}
	\label{fig:aufbau}
    \end{figure}btp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{shape_group_example}
	\caption{Recognizing the groups of shape}
	\label{fig:aufbau}
    \end{figure}


* Excercise2
  We introduced the special object 'obscured' to our cognitive
  architecture. A obscured object behaves like a undetermined 
  cell in the array. This lets us handle obscured objects uniformely
  in the whole cognitive architecture:
  - The regions detected from the peripheral view are increased to 
    include the obscured objects because they could obscure a cell
    of interest
  - When looking at cells for visual routines we allow obscured cells
    as long as we have more known cells than obscured cells.
    When we allow obscured cells in that way we have determined some
    aspects of them, for example when we recognized a 2x2 square of 
    red circles with one obscured object in them we have determined 
    for our system that this obscured object is a red circle. This 
    means that our system never counts a obscured object as two 
    different things
  - because of the uniform handling of obscured objects they are also
    supported when counting groups.
  - to count the number of obscured objects we let the peripheral view
    filter for regions that contain obscured objects and include all 
    directly reachable cells from the obscured objects in them. 
    On this region we count all objects/recognize the visual routines
    and count how much had obscured objects in them


* Examples 
  1.Here is one example where our System recognizes that there is
  one line-like obscured object
   \begin{figure}[hbtp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{count_obscured}
	\caption{Recognizing one line-like object}
	\label{fig:aufbau}
    \end{figure} \\
  2.Another Example of how the system can deal with obscured objects
  in all circumstances. Here it has the task to count all red circles
  and finds 13. This is the right answer because if recognizes a 
  line of two red circles at the bottom of the image with one
  being obscured
   \begin{figure}[hbtp]
	\centering
	\includegraphics[width= 0.7 \textwidth]{count_red_circles}
	\caption{counting - including obscured objects}
	\label{fig:aufbau}
    \end{figure}
